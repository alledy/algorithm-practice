"""
문제: 가중치 없는 그래프가 주어졌을 때 1에서 n번 정점으로 가는 모든 경로의 수를 출력하시오
입력: 정점의 수 n, 간선의 수 m, [정점1,정점2] 처럼 구성된 원소 m개를 담은 2차원 배열 arr
"""

# 일단 방문한 곳인지 체크하는 리스트가 하나 있어야 할 것 같음(재방문 방지)
# 이미 방문했거나, n에 도달한 경우 되돌아감
n,m=5,9
arr=[[1,2],[1,3],[1,4],[2,1],[2,3],[2,5],[3,4],[4,2],[4,5]]

d = {}
for x in arr:
    [n1,n2] = x
    d[n1] = d.get(n1,[]) + [n2]

cnt=0
def count(ch,last):
    # ch는 방문했던 노드들을 원소 1로 표기
    # last는 마지막으로 들른 노드
    global cnt,d
    # n이라는 목표에 도달한 경우 카운트 세고 return
    if ch[n-1] == 1:
        cnt += 1
        return
    for x in d[last]:
        # 이미 방문한 노드라면 건너뛴다 
        if ch[x-1] == 1:
            continue
        # 방문하지 않은 노드라면 방문했다고 표기하고
        # 마지막 방문한 노드를 담아서 자기자신을 호출한다
        # for문이 돌 때는 조건이 일정해야하므로 재귀 호출 후 ch를 원복 시켜준다
        else:
            ch[x-1] = 1
            count(ch,x)
            ch[x-1] = 0
             
ch = [1] + [0 for x in range(n-1)] # 맨 처음에 last를 1로 넣으므로 ch에도 처리해줘야함
count(ch,1)
print(cnt)  

############# 개선? ##############
# 요기서 나는 dictionary로 해줬는데
# 그래프를 인접행렬로 만들어서 체크해도 됨
    
    
    
